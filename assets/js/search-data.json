{
  
    
        "post0": {
            "title": "Regular Expressions in Python for Data Manipulation",
            "content": "Import the re module . import re # This is where python stores regular expression libraries. . There are several main processing functions in re that you might use. The first, match() chekcs for a match that is at the beginning of the string and returns a boolean. Similarly, search() checks for a match anywherer in the string and returns a boolean. . text = &quot;this is a good day.&quot; # Now let&#39;s check if it is a good day or not: if re.search(&quot;good&quot;, text): print(&quot;Wonderful!&quot;) else: print(&quot;Alas :(&quot;) . Wonderful! . In addition to checking for conditionals, we can segment a string. the work that regex does here is called tokenizing, where the string is seperated into substrings based on patterns. Tokenizing is a core activity in natural language processing, which we don&#39;t talk much about here but that you will studty in the future. . The findall() and split() functions will parse the string for us and written chunks. . text = &quot;Amy works diligently. Amy gets good grades. Our student Amy is successful.&quot; # This is a bit of a fabricated example, but lets split this on all instances of Amy re.split(&quot;Amy&quot;, text) . [&#39;&#39;, &#39; works diligently. &#39;, &#39; gets good grades. Our student &#39;, &#39; is successful.&#39;] . You&#39;ll notice that split has returned an empty string, followed by a number of statements about Amy, all as elements of a list. If we wanted to count how many times we have talked about Amy, we could use findall() . re.findall(&quot;Amy&quot;, text) . [&#39;Amy&#39;, &#39;Amy&#39;, &#39;Amy&#39;] . Ok we&#39;ve seen that .search() looks from some pattern and returns a boolean, that .split() will use a pattern for creating a list of substrings, and that .findall() will look for a pattern and pull out all the occurences. . Now that we know how the python regex API works, let&#39;s talk about more complex patterns and mechanisms. The regex specification standard defines a markup language to describe patterns in text. Lett&#39;s start with anchors. . Anchors specify the start and/or the end of the string that you are trying to match. The caret character ^ means start and the dollar character $ means end. . If you put ^ before a string, it means that the text the regex processor retrives must start withn the string you specifiy. For ending, you have to put the $ character after the string, it means that Regex retrives must end with the string you specify. . text = &quot;Amy works diligently. Amy gets good grades. Our student Amy is successful.&quot; # Let&#39;s see if it begins with Amy re.search(&quot;^Amy&quot;, text) . &lt;re.Match object; span=(0, 3), match=&#39;Amy&#39;&gt; . Notice that re.search() actually returned to us a new object, called re.Match object. An re.Match object always has a boolean value of True, as something was found, so you can always evaluate it in an if statement as we did earlier. The rendering of the match object also tells you what pattern was matched, in this case the word Amy, and the location the match was in, as the span. . Patterns and Character Classes . Let;s talk more about patterns and start with character classes. Let&#39;s create a string of a single learners&#39; grades over a semester in one course across all of their assignments . grades = &quot;ACAAAABCBCBAA&quot; # If we want to answer the question &quot;How many B&#39;s were in the gradelist?&quot; we could just use B len(re.findall(&quot;B&quot;, grades)) . 3 . If we wanted to count the number of A&#39;s or B&#39;s in the list, we can&#39;t use &quot;AB&quot; since this is just used to match all A&#39;s followed immediately by a B. Instead, we put the characters A and B inside square brackets . re.findall(&quot;[AB]&quot;, grades) . [&#39;A&#39;, &#39;A&#39;, &#39;A&#39;, &#39;A&#39;, &#39;A&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;A&#39;, &#39;A&#39;] . This is called the set operator. You can also include a range of characters, which are entered alphanumerically. For instance, if we want to refer to all the lowercase letters we could use &#39;[a-z]&#39;. Let&#39;s build a simple regex to parse out all the instances where this student recieves followed by a B or a C . re.findall(&quot;[A][B-C]&quot;, grades) . [&#39;AC&#39;, &#39;AB&#39;] . Notice how the &quot;[AB]&quot; pattern describes a set of possible characters which could be either A or B, while the &quot;[A][B-C]&quot; pattern denoted two sets of characters which must have beem matched back to back. You can write this pattern by using the pipe operator (|), which means OR . re.findall(&quot;AB|AC&quot;, grades) . [&#39;AC&#39;, &#39;AB&#39;] . We can use the caret with the set operators to negate our results. For instance, if we want to parse out only the grades which were not A&#39;s . re.findall(&quot;[^A]&quot;, grades) . [&#39;C&#39;, &#39;B&#39;, &#39;C&#39;, &#39;B&#39;, &#39;C&#39;, &#39;B&#39;] . 🔑 Note: The caret was previously matched to be the beginning of the string as an anchor point, but inside of the set operator the caret, and the other special characters we will be talking about, lose their default meaning. This can be a bit confusing, but with time everything will begin to make sense. . re.findall(&quot;^[^A]&quot;, grades) . [] . It&#39;s an empty list, because the regex says that we want to match any value at the beginning of the string which is not an A. Our strings through starts with an A, so there is no match found. And remember when you are using the set operator you are doing character-based matching. So you are matching individual characters in an OR method. . Quantifiers . Ok, so we&#39;ve talked about anchors and matching to the beginning and the end of patterns. And we&#39;ve talked about characters and using sets with [] notation. We&#39;ve also talked about character negation, and how the pipe operator allows us to do OR operations. Let&#39;s move on Quantifiers. . Quantifiers are the number of times you want a pattern to bematched in order to match. The most basic quantifier is expressed as &quot;e{m, n}&quot;, where e is the expression or character we are matching, m is the minimum number of times you want it to be matched, anad n is the maximum number of times the item could be matched. . re.findall(&quot;A{2,10}&quot;, grades) . [&#39;AAAA&#39;, &#39;AA&#39;] .",
            "url": "https://argf0rce.github.io/blog/2022/06/07/regex-notebook.html",
            "relUrl": "/2022/06/07/regex-notebook.html",
            "date": " • Jun 7, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Hands on ML Made Easy course on YouTube",
            "content": "Introduction . . Note: This post is for beginners who want to learn Machine Learning through python coding and for those who want a structured video lectures of the book, Hands-On Machine Learning with Scikit-learn, Keras and TensorFlow. For advanced users, I would suggest going through the curriculum in Notion for your own use case. . If you want a visual understanding then I would suggest following the short video on my youtube channel giving an overview of the series: . Hello World! I am Aditya Ramesh Ganti, a nerd-y (probably the word dosen’t exist, but nevermind!) student pursuing my B.Tech degree in Smart Manufacturing at PDPM Indian Institute of Information Technology, Design and Manufacturing, Jabalpur (wow, that’s a mouthful!😅 You can call it PDPM IIITDMJ). Jabalpur is a city in Madhya Pradesh, India. . I am a Machine Learning and Robotics Entusiast aiming to be one of the best in the field. I love doing research irrespective of the subject and gain knowledge, whether I remember it or not is secondary, though 😅. I have been learning Machine Learning and a little bit of Robotics for the past year and a half. And I thought I’d share my learning through the series of videos that I will be uploading weekly every Sunday starting today on my YouTube Channel. The series provides explanation of the concepts and do hands-on code provided in the book through Jupyter Notebook. All the code will be available in my github repo to get along with the videos. Though, the repo is still under development, all the code that were recorded will be provided before-hand. . Prerequisites . A pinch of Python and a touch of some familiar Python’s scientific libraries - Numpy, Pandas, and Matplotlib. . Also if you care about what is happening behind the scenes, you should have a reasonable understanding of college-level math as well. Khan Academy is a good place to brush up your math skills. . If you want a whole roadmap of what to learn to become a Machine Learning Engineer, I’d recommend the roadmap made by Mr. Daniel Bourke who is a self-learned Machine Learning engineer and is also one of my inspirations for creating content regarding the same. Thank you for all the hard work Mr. Bourke, looking forward to more videos of yours. . Why this course? . Actually I posted a discussion on his GitHub repo for the TensorFlow Deep Learning Course, regarding this series of videos… . . And that’s how it went. And I plan on following what he suggested. I am going to inspire you to do research on your own. There is Google to answer our prayers! . . So this course is going to cover as much as it can but also give you extra-curriculum activities which you need to google. Of course, it is not compulsory but it is always beneficial to be out of the comfort zone and take the initiative. 😎 . Hence, this course is going to be beneficial in not only gaining knowledge of Machine Learning, but also the methods of self-learning. . O’Reilly Hands-On ML Book Curriculum that we’ll be covering . Status . Finished chapter 1 June 3, 2022 | Starting Chapter 2 June 3, 2022 1:04 PM | . Part 1: . The Machine-Learning Landscape | End-to-End Machine Learning Project | Classification | Training Models | Support Vector Machines | Decision Trees | Ensemble Learning and Random Forests | Dimensionality Reduction | Unsupervised Learning Techniques | . Part 2: . Introduction to Artificial Neural Networks with Keras | Training Deep Neural Networks | Custom Models and Training with TensorFlow | Loading and Pre-processing Data with TensorFlow | Deep Computer Vision Using Convolutional Neural Networks | Processing Sequences using RNNs and CNNs | Natural Language Processing with RNNs and Attention | Representation Learning and Generative Learning using Autoencoders and GANs | Reinforcement Learning | Training and Deploying TensorFlow Models at Scale | . Part 3: . Machine Learning Project Checklist | SVM Dual Problem | Autodiff | Other Popular ANN Architectures | Special Data Structures | TensorFlow Graphs | . The Machine Learning Landscape . Assign: Aditya Ramesh Ganti Date: June 2, 2022 13:00-15:00 Status: Completed - June 2022 . 1. What is Machine Learning? . Machine Learning is the science and art of programming a computers so that they can learn from data. | . 2. Why use Machine Learning? . It is difficult to write and maintain a traditional program for the problem of spam filter as the input varies every time. | Instead predicting through some given key words by a Machine Learning algorithm is much easier. Hence comes the use of machine learning. | Also, machine learning can help humans learn about the various possibilities that can occur in an event given the few dependent features. | . To summarize, Machine Learning is great for: . Problems for which existing solutions require a lot of fine-tuning or long lists of rules: one Machine Learning algorithm can often simplify code and perform better than the traditional approach. | Complex Problem for which using a traditional approach yields no good solution: the Best Machine Learning techniques can perform better than the traditional approach. | Fluctuating environments: a Machine Learning system can adapt to new data. | Getting insights about complex problems and large amounts of data. | . 3. Examples of Applications . Analyzing images of products on a production line to automatically classify them | Detecting tumors in brain scans | Automatically classifying news articles | Detecting credit card fraud | Building an intelligent bot for a game | and much more… . 4. Types of Machine Learning Systems . There are so many different types of Machine Learning Systems that it is useful to classify them in broad categories, based on the following criteria: . Whether or not they are trained with human supervision | Whether or not they can learn incrementally on the fly. | Whether they work simply by comparing new data points, or instead by detecting patterns in the training data and building a predictive model, much like scientists do. | . 4.1 Supervised/Unsupervised Learning . Machine Learning systems can be classified according to the amount and type of supervision they get during training. There are four major categories: supervised learning, unsupervised learning, semi-supervised learning, and Reinforcement learning. . 4.1.1 Supervised Learning . In supervised learning, the training set you feed to the algorithm includes the desired solutions, called labels. . Here are some of the most important supervised learning algorithms: . k-Nearest Neighbors | Linear Regression | Logistic Regression | Support Vector Machines (SVMs) | Decision Trees and Random Forests | Neural Networks | . 4.1.2 Unsupervised Learning . In unsupervised learning as you might have guessed, the training data is unlabeled. In simple words… The system tries to learn without a teacher. . Here are some of the most important unsupervised learning algorithms: . Clustering K-Means | DBSCAN | Hierarchical Cluster Analysis (HCA) | . | Anomaly detection and novelty detection One-class SVM | Isolation Forest | . | Association rule learning Apriori | Eclat | . | .",
            "url": "https://argf0rce.github.io/blog/markdown/machine-learning/2022/06/05/My-First-Blog-Post.html",
            "relUrl": "/markdown/machine-learning/2022/06/05/My-First-Blog-Post.html",
            "date": " • Jun 5, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . Introduction . Hello World! I am Aditya Ramesh Ganti… So, you’re here to say all about me, My interests, hobbies, what I like, what I dislike..and all that, let’s begin then! . I was born in Bombay, India. I live in Hyderabad India with my mom, dad, and little sister. My mom has a lot of knowledge in coding like C C++ and other languages too, talk ‘bout multi-lingual.😅 My dad works in Cognizant and is good at table tennis and other sports.. and my little sister is currently in school studying 8th grade. . So, let’s start with my interests - I am interested in a lot of stuff let’s start with outdoor sports. I know a lot of sports, I can say I’m really good at them like Football, Table Tennis, Rugby (American Football), Badminton, Frisbee, Swimming, etc.. and I love coding the most, when I was in high school I started learning python. Slowly I started going deep in this coding journey, even my mom helped… My best language is currently Python.. and slowly I got a deep interest in robotics and then I knew the best possible robotic country is Japan, Tokyo… I started researching a lot about Japan and my love for it grew a lot, I even took a Japanese course and learned the language when I was in Btech… . And then came the word Machine Learning, Artificial Intelligence and, oh boy… I am glad that I jumped into this. The creativity and the potential ways we can go through ML in Robotics is just overwhelming (in a positive way…) . So now let’s go to my hobbies- I like to sing, draw, and do a little bit of dancing and I really like how to cook one day I’ll learn to cook really well, and I love anime, Spending time with my mom..and my dream is to become a professor in Japan, and of course, I love video games too. And I forgot to mention I am a Left Hander. and I love to ride a bicycle, it does not pollute and is eco-friendly. I am good at subjects like Mathematics and Physics. And I even read many books, mostly Chetan Bhagat, because I like the mystery in his stories. I am a fast runner too. My Favourite color is Sky Blue… I even adore cats so much, Even dogs. I Like viewing gaming computers, Various types of study tables On Youtube, I even designed my own table online. I even love Marvel, Starwars.., etc… . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://argf0rce.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://argf0rce.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}